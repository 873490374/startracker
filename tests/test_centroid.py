import numpy as np
import os
from PIL import Image
from timeit import default_timer as timer

import matplotlib.pyplot as plt


from program.const import MAIN_PATH, FOCAL_LENGTH_NORM
from program.tracker.camera import CameraConnector
from program.tracker.centroid import CentroidCalculator
from program.tracker.image_processor import ImageProcessor


class TestCentroid:
    images_path = os.path.join(MAIN_PATH, 'tests/images/')

    def test_centroid(self):

        res_x = 900
        res_y = 900
        pixel_size = 1
        focal_length = FOCAL_LENGTH_NORM * res_x
        a_roi = 5
        c_roi = 10
        i_threshold = 150
        mag_threshold = 160
        star_mag_pix = 14
        principal_point = (0.5 * res_x, 0.5 * res_y)

        centroid_calculator = CentroidCalculator(
            pixel_size,
            focal_length,
            a_roi,
            c_roi,
            i_threshold,
            mag_threshold,
            star_mag_pix,
            principal_point
        )
        for i in range(5):
            img_path = os.path.join(
                self.images_path, 'test_centroid_{}.png'.format(i))
            image = Image.open(img_path)
            image = image.convert('L')
            image_matrix = ImageProcessor(
                CameraConnector(), centroid_calculator).image_to_matrix(image)
            assert (res_x, res_y) == image_matrix.shape
            start_time = timer()
            stars = centroid_calculator.calculate_centroids(
                image_matrix)
            print(timer() - start_time)
            plot_result(stars, res_x, res_y)
            assert len(stars) == expected_len[i]
            for s in range(len(stars[i])):
                for j in range(5):
                    assert np.isclose(stars[s][j], expected_stars[i][s][j])


def plot_result(stars, res_x, res_y):
    stars = np.array(stars)
    x = stars[:, 4]
    y = stars[:, 5]

    fig, ax = plt.subplots()
    ax.scatter(y, x)
    ax.set_xlim(xmin=0, xmax=res_x)
    ax.set_ylim(ymin=0, ymax=res_y)
    plt.show()


expected_len = [13, 16, 16, 16, 17]

# [scene_star_id, uv0, uv1, uv2, scene_pos_y, scene_pos_x]
# noinspection LongLine
expected_stars = [
    [
        np.array([ 0,  -4.25257080e-02, -3.47121546e-02,  9.98492178e-01,  2.71187599e+02,  2.30937713e+02]),
        np.array([ 1,  -4.60595028e-04,  7.05799863e-02,  9.97506017e-01,  8.13937475e+02,  4.47624995e+02]),
        np.array([ 2,  -5.11036281e-02,  8.29426185e-02,  9.95243157e-01,  8.78656361e+02,  1.85890961e+02]),
        np.array([ 3,  -2.26734595e-02, -5.49536585e-02,  9.98231441e-01,  1.66843786e+02,  3.33171910e+02]),
        np.array([ 4,   3.13772655e-03, -4.73786033e-02,  9.98872075e-01,  2.06031861e+02,  4.66157194e+02]),
        np.array([ 5,   2.32712260e-02, -1.08079401e-02,  9.99670765e-01,  3.94390797e+02,  5.69735520e+02]),
        np.array([ 6,   3.02659511e-02,  6.06074405e-02,  9.97702716e-01,  7.62453591e+02,  6.06032082e+02]),
        np.array([ 7,   6.44125351e-02,  4.79275808e-03,  9.97911847e-01,  4.74703248e+02,  7.82000658e+02]),
        np.array([ 8,  -4.00710056e-02, -2.47678892e-03,  9.99193765e-01,  4.37250299e+02,  2.43727535e+02]),
        np.array([ 9,   3.75011863e-02,  1.92461443e-03,  9.99294730e-01,  4.59906286e+02,  6.43024369e+02]),
        np.array([ 1,  -4.65720029e-02, -5.12587180e-02,  9.97598914e-01,  1.85715006e+02,  2.09879256e+02]),
        np.array([ 11,  2.57906751e-04, -6.15632829e-02,  9.98103149e-01,  1.32746022e+02,  4.51329070e+02]),
        np.array([ 12,  3.05504899e-02, -4.10125424e-03,  9.99524811e-01,  4.28895073e+02,  6.07211869e+02])
    ],
    [
        np.array([ 0,  -4.25257080e-02, -3.47121546e-02,  9.98492178e-01,  2.71187599e+02,  2.30937713e+02]),
        np.array([ 1,  -4.60595028e-04,  7.05799863e-02,  9.97506017e-01,  8.13937475e+02,  4.47624995e+02]),
        np.array([ 2,  -6.00947981e-02, -1.95909922e-02,  9.98000405e-01,  3.49031374e+02,  1.40281681e+02]),
        np.array([ 3,  -5.70403571e-02,  7.29871235e-02,  9.95700395e-01,  8.27032076e+02,  1.55344679e+02]),
        np.array([ 4,  -7.45667976e-02, -1.57537007e-02,  9.97091577e-01,  3.68734114e+02,  6.53451827e+01]),
        np.array([ 5,  -5.11036281e-02,  8.29426185e-02,  9.95243157e-01,  8.78656361e+02,  1.85890961e+02]),
        np.array([ 6,  -2.26734595e-02, -5.49536585e-02,  9.98231441e-01,  1.66843786e+02,  3.33171910e+02]),
        np.array([ 7,   3.02659511e-02,  6.06074405e-02,  9.97702716e-01,  7.62453591e+02,  6.06032082e+02]),
        np.array([ 8,   6.44125351e-02,  4.79275808e-03,  9.97911847e-01,  4.74703248e+02,  7.82000658e+02]),
        np.array([ 9,  -4.00710056e-02, -2.47678892e-03,  9.99193765e-01,  4.37250299e+02,  2.43727535e+02]),
        np.array([ 10,  3.17411902e-03, -4.74210518e-02,  9.98869946e-01,  2.05812759e+02,  4.66344626e+02]),
        np.array([ 11,  2.37414869e-02, -1.11539003e-02,  9.99655907e-01,  3.92609904e+02,  5.72156930e+02]),
        np.array([ 12, -4.65720029e-02, -5.12587180e-02,  9.97598914e-01,  1.85715006e+02,  2.09879256e+02]),
        np.array([ 13,  2.57906751e-04, -6.15632829e-02,  9.98103149e-01,  1.32746022e+02,  4.51329070e+02]),
        np.array([ 14,  3.03942073e-02, -4.12031656e-03,  9.99529497e-01,  4.28797079e+02,  6.06406910e+02]),
        np.array([ 15,  3.75518900e-02,  2.52786877e-03,  9.99291482e-01,  4.63011371e+02,  6.43285977e+02])
    ],
    [
        np.array([ 0,  -4.25257080e-02, -3.47121546e-02,  9.98492178e-01,  2.71187599e+02,  2.30937713e+02]),
        np.array([ 1,  -4.60595028e-04,  7.05799863e-02,  9.97506017e-01,  8.13937475e+02,  4.47624995e+02]),
        np.array([ 2,  -6.00947981e-02, -1.95909922e-02,  9.98000405e-01,  3.49031374e+02,  1.40281681e+02]),
        np.array([ 3,  -5.70403571e-02,  7.29871235e-02,  9.95700395e-01,  8.27032076e+02,  1.55344679e+02]),
        np.array([ 4,  -7.45667976e-02, -1.57537007e-02,  9.97091577e-01,  3.68734114e+02,  6.53451827e+01]),
        np.array([ 5,  -5.11036281e-02,  8.29426185e-02,  9.95243157e-01,  8.78656361e+02,  1.85890961e+02]),
        np.array([ 6,  -2.26734595e-02, -5.49536585e-02,  9.98231441e-01,  1.66843786e+02,  3.33171910e+02]),
        np.array([ 7,   3.02659511e-02,  6.06074405e-02,  9.97702716e-01,  7.62453591e+02,  6.06032082e+02]),
        np.array([ 8,   6.44125351e-02,  4.79275808e-03,  9.97911847e-01,  4.74703248e+02,  7.82000658e+02]),
        np.array([ 9,  -4.00223584e-02, -2.47678934e-03,  9.99195715e-01,  4.37250321e+02,  2.43978358e+02]),
        np.array([ 10,  3.18172348e-03, -4.74286286e-02,  9.98869562e-01,  2.05773650e+02,  4.66383790e+02]),
        np.array([ 11,  2.37414869e-02, -1.11539003e-02,  9.99655907e-01,  3.92609904e+02,  5.72156930e+02]),
        np.array([ 12, -4.65720029e-02, -5.12587180e-02,  9.97598914e-01,  1.85715006e+02,  2.09879256e+02]),
        np.array([ 13,  2.57906751e-04, -6.15632829e-02,  9.98103149e-01,  1.32746022e+02,  4.51329070e+02]),
        np.array([ 14,  3.75518900e-02,  2.52786877e-03,  9.99291482e-01,  4.63011371e+02,  6.43285977e+02]),
        np.array([ 15,  3.01969048e-02, -4.27820469e-03,  9.99534814e-01,  4.27984712e+02,  6.05390776e+02])
    ],
    [
        np.array([ 0,  -4.25257080e-02, -3.47121546e-02,  9.98492178e-01,  2.71187599e+02,  2.30937713e+02]),
        np.array([ 1,  -4.60595028e-04,  7.05799863e-02,  9.97506017e-01,  8.13937475e+02,  4.47624995e+02]),
        np.array([ 2,  -6.00947981e-02, -1.95909922e-02,  9.98000405e-01,  3.49031374e+02,  1.40281681e+02]),
        np.array([ 3,  -5.70403571e-02,  7.29871235e-02,  9.95700395e-01,  8.27032076e+02,  1.55344679e+02]),
        np.array([ 4,  -7.45667976e-02, -1.57537007e-02,  9.97091577e-01,  3.68734114e+02,  6.53451827e+01]),
        np.array([ 5,  -5.11036281e-02,  8.29426185e-02,  9.95243157e-01,  8.78656361e+02,  1.85890961e+02]),
        np.array([ 6,  -2.26734595e-02, -5.49536585e-02,  9.98231441e-01,  1.66843786e+02,  3.33171910e+02]),
        np.array([ 7,   3.02659511e-02,  6.06074405e-02,  9.97702716e-01,  7.62453591e+02,  6.06032082e+02]),
        np.array([ 8,   6.44125351e-02,  4.79275808e-03,  9.97911847e-01,  4.74703248e+02,  7.82000658e+02]),
        np.array([ 9,  -4.00223584e-02, -2.47678934e-03,  9.99195715e-01,  4.37250321e+02,  2.43978358e+02]),
        np.array([ 10,  3.16504823e-03, -4.74286267e-02,  9.98869615e-01,  2.05773673e+02,  4.66297923e+02]),
        np.array([ 11,  2.37354251e-02, -1.11417305e-02,  9.99656187e-01,  3.92672537e+02,  5.72125706e+02]),
        np.array([ 12, -4.65720029e-02, -5.12587180e-02,  9.97598914e-01,  1.85715006e+02,  2.09879256e+02]),
        np.array([ 13,  2.57906751e-04, -6.15632829e-02,  9.98103149e-01,  1.32746022e+02,  4.51329070e+02]),
        np.array([ 14,  3.75958072e-02,  2.58704906e-03,  9.99289679e-01,  4.63316006e+02,  6.43512375e+02]),
        np.array([ 15,  3.01893181e-02, -4.27553955e-03,  9.99535054e-01,  4.27998432e+02,  6.05351698e+02])
    ],
    [
        np.array([ 0,   7.72899107e-02, -7.92221584e-02,  9.93856186e-01,  4.00000000e+01,  8.50000000e+02]),
        np.array([ 1,  -4.25499306e-02, -3.47242442e-02,  9.98490726e-01,  2.71125061e+02,  2.30812617e+02]),
        np.array([ 2,  -4.60595028e-04,  7.05799863e-02,  9.97506017e-01,  8.13937475e+02,  4.47624995e+02]),
        np.array([ 3,  -6.00947686e-02, -1.96152927e-02,  9.97999929e-01,  3.48906085e+02,  1.40281685e+02]),
        np.array([ 4,  -5.70887100e-02,  7.29869148e-02,  9.95697640e-01,  8.27032042e+02,  1.55094085e+02]),
        np.array([ 5,  -7.45667976e-02, -1.57537007e-02,  9.97091577e-01,  3.68734114e+02,  6.53451827e+01]),
        np.array([ 6,  -5.11036281e-02,  8.29426185e-02,  9.95243157e-01,  8.78656361e+02,  1.85890961e+02]),
        np.array([ 7,   3.02659511e-02,  6.06074405e-02,  9.97702716e-01,  7.62453591e+02,  6.06032082e+02]),
        np.array([ 8,   6.44095101e-02,  4.78669866e-03,  9.97912072e-01,  4.74672011e+02,  7.81984992e+02]),
        np.array([ 9,  -4.00299523e-02, -2.49048389e-03,  9.99195376e-01,  4.37179822e+02,  2.43939197e+02]),
        np.array([ 10, -2.26521905e-02, -5.49824245e-02,  9.98230340e-01,  1.66695252e+02,  3.33281372e+02]),
        np.array([ 11,  3.18770818e-03, -4.73846944e-02,  9.98871628e-01,  2.06000387e+02,  4.66414574e+02]),
        np.array([ 12,  2.37384813e-02, -1.11280699e-02,  9.99656266e-01,  3.92742829e+02,  5.72141422e+02]),
        np.array([ 13, -4.65402168e-02, -5.12436450e-02,  9.97601171e-01,  1.85793319e+02,  2.10043686e+02]),
        np.array([ 14,  2.57906804e-04, -6.15632827e-02,  9.98103149e-01,  1.32746023e+02,  4.51329071e+02]),
        np.array([ 15,  3.75889497e-02,  2.59468633e-03,  9.99289917e-01,  4.63355314e+02,  6.43477032e+02]),
        np.array([ 16,  3.01836225e-02, -4.28430082e-03,  9.99535189e-01,  4.27953350e+02,  6.05322368e+02])
    ],
]
